"""
Django settings for config project.
Generated by 'django-admin startproject' using Django 5.2.6.
"""

from pathlib import Path
import os
from dotenv import load_dotenv
import dj_database_url

# -------------------------
# Paths / .env
# -------------------------
BASE_DIR = Path(__file__).resolve().parent.parent

# Load .env file - try multiple locations
env_file = BASE_DIR / ".env"
if env_file.exists():
    load_dotenv(env_file)
else:
    # Try loading from current directory
    load_dotenv()

# -------------------------
# Security
# -------------------------
# First try to load from environment, then fall back to safe defaults for development
DEBUG = os.environ.get("DEBUG", "True").lower() in ("true", "1", "yes")

SECRET_KEY = os.environ.get("SECRET_KEY")
if not SECRET_KEY:
    # Always use development key locally, production will have environment variable
    SECRET_KEY = "dev-insecure-secret-key-change-me-&+@742w_we^4l&%ynworzhua%0(e7wt8a9r+70zzc1fwul6z#t"
    if not DEBUG:
        print("WARNING: Using development SECRET_KEY in production!")

# ALLOWED_HOSTS: hostnames only (no http/https). Comma-separated env supported.
_raw_hosts = os.environ.get("ALLOWED_HOSTS", "")
ALLOWED_HOSTS = [h.strip() for h in _raw_hosts.split(",") if h.strip()] or [
    "localhost",
    "127.0.0.1",
    "my-daily-wins-tracker-b04493bdcdbc.herokuapp.com",
]

# CSRF_TRUSTED_ORIGINS: must include scheme; comma-separated env supported.
_raw_csrf = os.environ.get("CSRF_TRUSTED_ORIGINS", "")
CSRF_TRUSTED_ORIGINS = []
if _raw_csrf:
    for origin in _raw_csrf.split(","):
        origin = origin.strip()
        if origin:
            # Ensure the origin starts with a scheme
            if not origin.startswith(('http://', 'https://')):
                origin = f'https://{origin}'
            CSRF_TRUSTED_ORIGINS.append(origin)
else:
    # Default trusted origins for production
    CSRF_TRUSTED_ORIGINS = [
        "https://my-daily-wins-tracker-b04493bdcdbc.herokuapp.com",
    ]

# Make Django aware it’s behind Heroku’s proxy & SSL
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
if not DEBUG:
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_SSL_REDIRECT = True  # force HTTPS in production

# -------------------------
# Apps
# -------------------------
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "widget_tweaks",  # For better form styling
    "tracker",  # your app
]

# -------------------------
# Middleware
# -------------------------
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",  # serve static files on Heroku
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# -------------------------
# URLs / WSGI
# -------------------------
ROOT_URLCONF = "config.urls"
WSGI_APPLICATION = "config.wsgi.application"

# -------------------------
# Templates
# -------------------------
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# -------------------------
# Database Configuration
# -------------------------
# Hybrid setup: PostgreSQL for production (Heroku), SQLite for development
DATABASE_URL = os.environ.get("DATABASE_URL")
if DATABASE_URL:
    # Production: Use PostgreSQL via Heroku DATABASE_URL
    DATABASES = {
        "default": dj_database_url.parse(
            DATABASE_URL,
            conn_max_age=600,      # Connection pooling for performance
            ssl_require=True,      # Required for Heroku Postgres
        )
    }
else:
    # Development: Use SQLite for easy local development
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }

# -------------------------
# -------------------------
# Password Validation - ADHD-Friendly Configuration
# -------------------------
AUTH_PASSWORD_VALIDATORS = [
    # Check password isn't too similar to user info (username, email, etc.)
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    
    # Require minimum 8 characters
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator", "OPTIONS": {"min_length": 8}},
    
    # NOTE: CommonPasswordValidator removed for ADHD accessibility
    # Users can use familiar passwords without frustrating rejections
    
    # Prevent purely numeric passwords (123456789)
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
    
    # Our custom validator: requires letters + numbers (simple but secure)
    {"NAME": "tracker.validators.CustomPasswordValidator"},
]

# -------------------------
# Internationalization
# -------------------------
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"  # Store all times in UTC, convert in templates as needed
USE_I18N = True
USE_TZ = True

# -------------------------
# Static Files (CSS, JavaScript, Images)
# -------------------------
STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"  # Where collectstatic puts files for production

# For local development static files (uncomment if you have a /static folder):
# STATICFILES_DIRS = [BASE_DIR / "static"]

# Whitenoise for serving static files on Heroku with compression
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# -------------------------
# Authentication URLs and Redirects
# -------------------------
LOGIN_URL = '/accounts/login/'           # Where to redirect if login required
LOGIN_REDIRECT_URL = '/dashboard/'       # Where to go after successful login
LOGOUT_REDIRECT_URL = '/'               # Where to go after logout

# -------------------------
# Defaults
# -------------------------
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
